package com.example.alef.core.object;

import com.example.alef.core.enemy.*;
import com.example.alef.core.inventory.PlayerItem;
import com.example.alef.core.location.Cell;
import com.example.alef.core.location.CellRepo;
import com.example.alef.core.location.Position;
import com.example.alef.core.player.Player;
import com.example.alef.core.player.PlayerRepo;
import jakarta.transaction.Transactional;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.ThreadLocalRandom;

@Service
public class DestructionService {

    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –≤–Ω–µ–¥—Ä—è–µ–º—ã–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    private final GameObjectRepo gameObjectRepo;
    private final PlayerRepo playerRepo;
    private final SimpMessagingTemplate messagingTemplate;
    private final EnemyRepo enemyRepo;
    private final CellRepo cellRepo;

    public DestructionService(GameObjectRepo gameObjectRepo,
                              PlayerRepo playerRepo,
                              ItemRepo itemRepo,
                              SimpMessagingTemplate messagingTemplate,
                              EnemyLootRepo enemyLootRepo,
                              EnemyRepo enemyRepo, CellRepo cellRepo) {
        this.gameObjectRepo = gameObjectRepo;
        this.playerRepo = playerRepo;
        this.messagingTemplate = messagingTemplate;
        this.enemyRepo = enemyRepo;
        this.cellRepo = cellRepo;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏ –≤—ã–ø–∞–¥–µ–Ω–∏–µ –ª—É—Ç–∞.
     * @param object ‚Äî –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω
     * @param destroyer ‚Äî –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ —É–Ω–∏—á—Ç–æ–∂–∏–ª
     */
    @Transactional
    public void destroyObject(GameObject object, Player destroyer, Cell cell) {
        if (object.getDestroy() != null && object.getDestroy()) {
            System.out.printf("‚ö†Ô∏è –û–±—ä–µ–∫—Ç %s —É–∂–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω\n", object.getName());
            return;
        }

        markObjectDestroyed(object);
        List<Item> droppedItems = rollLootFromObject(object, destroyer);
        playerRepo.save(destroyer);
        cell.setBarrier(false);
        cellRepo.save(cell);

        notifyLootResult(destroyer, object.getName(), droppedItems);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤—Ä–∞–≥–∞ –∏ –≤—ã–ø–∞–¥–µ–Ω–∏–µ –ª—É—Ç–∞.
     * @param enemy ‚Äî –≤—Ä–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–±–∏—Ç
     * @param killer ‚Äî –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ —É–±–∏–ª
     */
    @Transactional
    public void killEnemy(Enemy enemy, Player killer) {
        if (enemy.getLive() == null || !enemy.getLive()) {
            System.out.printf("‚ö†Ô∏è –í—Ä–∞–≥ %s —É–∂–µ –º–µ—Ä—Ç–≤\n", enemy.getName());
            return;
        }

        markEnemyKilled(enemy);
        List<Item> droppedItems = rollLootFromEnemy(enemy, killer);
        playerRepo.saveAndFlush(killer);
        notifyLootResult(killer, enemy.getName(), droppedItems);
    }

    // –ü–æ–º–µ—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–∞–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–π
    @Transactional
    private void markObjectDestroyed(GameObject object) {
        object.setDestroy(true);
        object.setTimeOfdestroy(Instant.now());
        gameObjectRepo.save(object);
        System.out.printf("üí• –û–±—ä–µ–∫—Ç %s —É–Ω–∏—á—Ç–æ–∂–µ–Ω\n", object.getName());
    }

    // –ü–æ–º–µ—á–∞–µ—Ç –≤—Ä–∞–≥–∞ –∫–∞–∫ —É–±–∏—Ç–æ–≥–æ
    @Transactional
    private void markEnemyKilled(Enemy enemy) {
        enemy.setLive(false);
        enemy.setHP(0);
        enemyRepo.save(enemy);
        System.out.printf("üíÄ –í—Ä–∞–≥ %s —É–Ω–∏—á—Ç–æ–∂–µ–Ω\n", enemy.getName());
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª—É—Ç–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
    private List<Item> rollLootFromObject(GameObject object, Player destroyer) {
        List<Item> droppedItems = new ArrayList<>();

        for (Item item : object.getLootTable()) {
            int chance = item.getRarity();
            int roll = ThreadLocalRandom.current().nextInt(100);
            System.out.printf("üé≤ –õ—É—Ç: %s (ID=%d), —à–∞–Ω—Å=%d%%, –≤—ã–ø–∞–¥–µ–Ω–∏–µ=%s\n",
                    item.getName(), item.getId(), chance, roll < chance ? "–î–ê" : "–ù–ï–¢");

            if (roll < chance) {
                droppedItems.add(item);
                addItemToInventory(destroyer, item, 1);
            }
        }

        return droppedItems;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª—É—Ç–∞ –∏–∑ –≤—Ä–∞–≥–∞
    private List<Item> rollLootFromEnemy(Enemy enemy, Player killer) {
        List<Item> droppedItems = new ArrayList<>();

        for (EnemyLoot loot : enemy.getLootTable()) {
            Item item = loot.getItem();
            int chance = loot.getDropChance();
            int roll = ThreadLocalRandom.current().nextInt(100);
            boolean dropped = roll < chance;

            System.out.printf("üé≤ –õ—É—Ç: %s (ID=%d), —à–∞–Ω—Å=%d%%, –≤—ã–ø–∞–¥–µ–Ω–∏–µ=%s\n",
                    item.getName(), item.getId(), chance, dropped ? "–î–ê" : "–ù–ï–¢");

            if (dropped) {
                droppedItems.add(item);
                addItemToInventory(killer, item, loot.getQuantity());
            }
        }

        return droppedItems;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
    private void addItemToInventory(Player player, Item item, int count) {
        for (PlayerItem pi : player.getInventory()) {
            if (pi.getItem() != null && pi.getItem().getId().equals(item.getId())) {
                int oldCount = pi.getCount();
                pi.setCount(oldCount + count);
                System.out.printf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: %s (ID=%d), –±—ã–ª–æ=%d, —Å—Ç–∞–ª–æ=%d\n",
                        item.getName(), item.getId(), oldCount, pi.getCount());
                return;
            }
        }

        PlayerItem newItem = new PlayerItem();
        newItem.setPlayer(player);
        newItem.setItem(item);
        newItem.setCount(count);
        player.getInventory().add(newItem);

        System.out.printf("üÜï –î–æ–±–∞–≤–ª–µ–Ω: %s (ID=%d), –∫–æ–ª-–≤–æ=%d\n",
                item.getName(), item.getId(), count);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –ª—É—Ç–µ
    private void notifyLootResult(Player player, String sourceName, List<Item> droppedItems) {
        if (!droppedItems.isEmpty()) {
            String lootMessage = String.format("–ü–æ–ª—É—á–µ–Ω–æ –∏–∑ %s!", sourceName);
            LootDTO lootDTO = new LootDTO(sourceName, droppedItems, lootMessage);
            messagingTemplate.convertAndSendToUser(player.getName(), "/queue/loot", lootDTO);
            System.out.printf("üì¶ –ò–≥—Ä–æ–∫ %s –ø–æ–ª—É—á–∏–ª %d –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç %s\n", player.getName(), droppedItems.size(), sourceName);
        } else {
            System.out.printf("üì≠ –ò–≥—Ä–æ–∫ %s –Ω–µ –ø–æ–ª—É—á–∏–ª –ª—É—Ç –æ—Ç %s\n", player.getName(), sourceName);
        }
    }
}
