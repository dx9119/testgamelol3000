const visiblePlayerSprites = new Map(); // key: player.id ‚Üí Phaser.Sprite

export function initVisibilityTracking({ stompClient, log, scene, userName, onVisibilityUpdate }) {
    const visibilityDest = `/user/${userName}/queue/visibility`;

    const visibilitySub = stompClient.subscribe(visibilityDest, msg => {
        log(`[RAW] ${msg.body}`);

        let dto;
        try {
            dto = JSON.parse(msg.body);
        } catch (e) {
            log(`[VISIBILITY] ‚ùå JSON.parse error: ${e.message}`);
            log(`[VISIBILITY] ‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: ${msg.body}`);
            return;
        }

        if (!dto || typeof dto !== 'object') {
            log(`[VISIBILITY] ‚ùå DTO –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º: ${msg.body}`);
            return;
        }

        if (!Array.isArray(dto.visiblePlayers)) {
            log(`[VISIBILITY] ‚ùå visiblePlayers –Ω–µ –º–∞—Å—Å–∏–≤: ${JSON.stringify(dto.visiblePlayers)}`);
            return;
        }

        updateVisiblePlayers(dto.visiblePlayers, scene, log, userName);
        log(`[VISIBILITY] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${dto.visiblePlayers.length} –∏–≥—Ä–æ–∫–æ–≤`);

        // üîî –ü–µ—Ä–µ–¥–∞—ë–º –Ω–∞—Ä—É–∂—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        onVisibilityUpdate?.(dto.visiblePlayers);
    });

    return { visibilityDest, visibilitySub };
}

function updateVisiblePlayers(visiblePlayers, scene, log, userName) {
    const currentIds = new Set();

    visiblePlayers.forEach(p => {
        if (!p || typeof p !== 'object') {
            log(`[VISIBILITY] ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç: ${JSON.stringify(p)}`);
            return;
        }

        const { id, name, x, y, isMoving, moving } = p;

        if (id == null || name == null || typeof x !== 'number' || typeof y !== 'number') {
            log(`[VISIBILITY] ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–≥—Ä–æ–∫: ${JSON.stringify(p)}`);
            return;
        }

        if (name === userName) {
            log(`[VISIBILITY] üîç –ü—Ä–æ–ø—É—â–µ–Ω —Å–≤–æ–π –∏–≥—Ä–æ–∫: ${name} (${id})`);
            return;
        }

        currentIds.add(id);

        let sprite = visiblePlayerSprites.get(id);
        if (!sprite) {
            sprite = scene.add.circle(x, y, 10, 0x00ff00);
            visiblePlayerSprites.set(id, sprite);
            log(`[VISIBILITY] ‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫ ${name} (${id})`);
        } else {
            sprite.setPosition(x, y);
        }

        const isActuallyMoving = isMoving ?? moving ?? false;
        sprite.setFillStyle(isActuallyMoving ? 0xff0000 : 0x00ff00);
    });

    for (const [id, sprite] of visiblePlayerSprites.entries()) {
        if (!currentIds.has(id)) {
            sprite.destroy();
            visiblePlayerSprites.delete(id);
            log(`[VISIBILITY] ‚ûñ –£–¥–∞–ª—ë–Ω –∏–≥—Ä–æ–∫ ${id}`);
        }
    }
}
